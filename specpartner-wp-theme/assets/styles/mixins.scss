// =============================================================================
// Font Face
// =============================================================================

@mixin fontface($name, $path, $weight: null, $style: null, $exts: eot otf woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

//
// Responsive
//


@mixin bkpoint($min-width, $max-width) {
    @media screen and (min-width: $min-width) and (max-width: $max-width) { @content; }
}

@mixin bkp($class) {

	
	@if ($class == md) {
    @media screen and (min-width: 1024px) and (max-width: 1439px) { @content; }
  }
	
	@if ($class == sm) {
    @media screen and (min-width: 640px) and (max-width: 1023px) { @content; }
  }
	
	@if ($class == xs) {
    @media screen and (min-width: 320px) and (max-width: 639px) { @content; }
  }
	
  @else {
    @warn "Breakpoint mixin supports: xs, sm, md, lg";
  }
  
}

@function vw($px-vw, $base-vw: 1440px)  {
	@return ($px-vw * 100vw) / $base-vw
}

@function vwm($px-vw, $base-vw: 1024px)  {
	@return ($px-vw * 100vw) / $base-vw
}

@function vwt($px-vw, $base-vw: 640px)  {
	@return ($px-vw * 100vw) / $base-vw
}

@function vws($px-vw, $base-vw: 320px)  {
	@return ($px-vw * 100vw) / $base-vw
}


//
//ClearFix
//

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin horcenter {
  margin-left: auto;
  margin-right: auto;
}